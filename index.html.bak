<!DOCTYPE html>
<meta charset="utf-8">
<style>

.background {
  fill: none;
  pointer-events: all;
}

#states {
  fill: #ccc;
}

#states .active {
  fill: orange;
}
  
circle{

  fill: brown;
  fill-opacity: .3;
  stroke: black;
  stroke-linejoin: round;
  stroke-width: .5px;
  stroke-opacity: .5;
}
  
div.tooltip {
  
  color: #222;
  background-color: #fff;
  padding: .5em;
  text-shadow: #f5f5f5 0 1px 0;
  border-radius: 23.08px;
  opacity: 0.9;
  position: absolute;
}

.hidden {
        display: none;
 }

</style>
<body>
<script src="https://d3js.org/d3.v4.min.js"></script>
<script src="https://d3js.org/topojson.v1.min.js"></script>
<script>

var width = 960,
    height = 500,
    centered;

var tooltip = d3.select("body").append("div")
							.attr("class", "hidden tooltip")	
var radius = d3.scaleSqrt()
    .domain([0, 1e6])
    .range([0, 15]);
  
var projection = d3.geoMercator()
                   .center([110, 12]) 
                   .scale([600]) 
                   .translate([550,550])
                   .precision([.1]);

var path = d3.geoPath()
    .projection(projection);

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);

svg.append("rect")
    .attr("class", "background")
    .attr("width", width)
    .attr("height", height)
    .on("click", clicked);

var g = svg.append("g");

var vector =svg.append("path")
			.attr("id","point");
  
d3.json("china.geojson", function(error, china) {
  if (error) throw error;

  g.append("g")
      .attr("id", "states")
    .selectAll("path")
      .data(china.features)
    .enter().append("path")
      .attr("d", path)
  		.on("click",clicked);
      

  
});
  
d3.csv("china_coal.csv",function(error,plant) {
  if (error) throw error;
  	svg.selectAll(".circle")
			.data(plant).enter()
			.append("circle")
    	.attr('class', 'circle')
			.attr("cx", function (d) { return projection([d.longitude,d.latitude])[0]; })
			.attr("cy", function (d) { return projection([d.longitude,d.latitude])[1]; })
			.attr("r", function (d) { return 10*radius(d.capacity_mw)+"px"; })
    	//ajouter un tooltip avec le nom et la valeur de la r√©gion
    
      .on('mouseover', function(d) {
      d3.selectAll('.circle')
        .filter(function(e) {
        return e !== d
    	})
      .style('opacity', .09)
      var mouse = d3.mouse(svg.node()).map(function(x) {
        return parseInt(x)
      })
      tooltip.classed("hidden", false)
        .attr("style", "left:" + (mouse[0] + 20) +
              "px; top:" + (mouse[1] - 40) + "px")
        .html(d.name + ": " + d.capacity_mw + "mW in " + d.commissioning_year)
    })
    
     .on('mouseout', function(d) {
     tooltip.classed("hidden", true)
     d3.selectAll('.circle')
     .filter(function(e) {
      	return e !== d
    })
    .style('opacity', 1)
    });
  });
  

// clicked function to zoom in
function clicked(d) {
  var x, y, k;

  if (d && centered !== d) {
    var centroid = path.centroid(d);
    x = centroid[0];
    y = centroid[1];
    k = 4;
    centered = d;
  } else {
    x = width / 2;
    y = height / 2;
    k = 1;
    centered = null;
  }

  g.selectAll("path")
      .classed("active", centered && function(d) { return d === centered; });

  g.transition()
      .duration(750)
      .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")scale(" + k + ")translate(" + -x + "," + -y + ")")
      .style("stroke-width", 1.5 / k + "px");
  
  svg.selectAll("circle").transition()
      .duration(750)
      .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")scale(" + k + ")translate(" + -x + "," + -y + ")")
      .style("stroke-width", 1.5 / k + "px")
  		.attr("d",path);
}

</script>